LittleEndian();

typedef struct {
    uint count;
    if (count > 0)
        char str[count];
} STRING <read=printString>;
string printString(struct STRING &s) {
    if (s.count > 0) {
        return s.str;
    } else {
        return "";
    }
}

enum PackOrder {
    XZY,
    ZXY,
    XYZ,
};

typedef struct (PackOrder order) {
    float packed <hidden=true>;
    local float x, y, z;

    if (order == XZY) {
        x = packed;
        y = packed / 65536.0f;
        z = packed / 256.0f;
    } else if (order == ZXY) {
        x = packed / 256.0f;
        y = packed / 65536.0f;
        z = packed;
    } else if (order == XYZ) {
        x = packed;
        y = packed / 256.0f;
        z = packed / 65536.0f;
    }

    x -= Floor(x);
    y -= Floor(y);
    z -= Floor(z);

    x = x*2 - 1;
    y = y*2 - 1;
    z = z*2 - 1;
} PackedVector <read=printPackedVector>;

string printPackedVector(struct PackedVector &p) {
    local string ret;
    SPrintf(ret, "(%.4f, %.4f, %.4f)", p.x, p.y, p.z);
    return ret;
}


struct UnknownData0 {
    float Unknown00;
    float Unknown04;
    float Unknown08;
    float Unknown0C;
    float Unknown10;
    float Unknown14;
    float Unknown18;
    float Unknown1C;
    float Unknown20;
    float Unknown24;
    float Unknown28;
    float Unknown2C;
    float Unknown30;
    int Unknown34;
};

struct Material {
    STRING undeformedDiffuseTexture;
    STRING undeformedNormalMap;
    STRING undeformedPropertiesMap;
    STRING deformedDiffuseTexture;
    STRING deformedNormalMap;
    STRING deformedPropertiesMap;
    STRING normalMapEx3;
    STRING shadowMapTexture;
    uint unknown;
};

struct CarPaintData0 {
    float posX;
    float posY;
    float posZ;
    float posW;

    ushort texCoordA;
    ushort texCoordB;
    ushort texCoordC;
    ushort texCoordD;
};

struct CarPaintData1 {
    float u;
    float v;
    float w;

    PackedVector normal(XZY);
    PackedVector deformedNormal(XZY);
    PackedVector tangent(ZXY);
    PackedVector deformedTangent(ZXY);
};

struct CarPaint {
    ubyte version;

    UnknownData0 unknownData0;
    Material material;

    int data0Count <hidden=true>;
    CarPaintData0 data0[data0Count];

    int data1Count <hidden=true>;
    CarPaintData1 data1[data1Count] <optimize=true>;

    int faceCount <hidden=true>;
    short faces[faceCount];

    uint deformTable[256];
};

struct Vertex {
    float posX;
    float posY;
    float posZ;
    PackedVector packed1(XZY);

    float u;
    float v;
    PackedVector packed2(XYZ);
    PackedVector packed3(XYZ);
};

struct CarPaintSimple {
    ubyte version;

    float unknownf[9];
    uint unknown[5];

    Material material;

    uint vertexCount;
    Vertex vertices[vertexCount];

    uint faceCount;
    short faces[faceCount];
};

struct DeformableWindowData0 {
    float posX;
    float posY;
    float posZ;
    float posW;
    short tex1A;
    short tex1B;
    short tex1C;
    short tex1D;
    float tex2A;
    float tex2B;
    float tex2C;
    float tex2D;
    float U;
    float V;
};

struct DeformableWindow {
    ubyte version;
    Material material;
    if (version >= 2) {
        uint unknown;
        uint deformTable[256];
    }

    int data0Count <hidden=true>;
    DeformableWindowData0 data0[data0Count];

    int faceCount <hidden=true>;
    short faces[faceCount];

    if (version >= 0 && version <= 1) {
        uint deformTable[256];
    }
    if (version == 1) {
        uint unknown;
    }
};

struct RBM {
    uint magicLength;
    char magic[magicLength];
    uint versionMajor;
    uint versionMinor;
    uint versionRevision;

    float minX;
    float minY;
    float minZ;
    float maxX;
    float maxY;
    float maxZ;

    int blockCount;

    local int i;
    for (i = 0; i < blockCount; i++) {
        uint typeHash <hidden=true>;
        switch (typeHash) {
            case 3448970869:    CarPaint carPaint; break;
            case 112326146:     DeformableWindow deformableWindow; break;
            case 2173928592:    CarPaintSimple carPaintSimple; break;
        }
        uint blockFooter <hidden=true>;
    }
};

RBM rbmfile;
